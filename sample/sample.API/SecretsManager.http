### AWS Secrets Manager API Examples
### This file demonstrates the usage of AWS Secrets Manager endpoints with various API versioning strategies

# Variables
@baseUrl = https://localhost:7071/api
@secretName = test-secret
@multipleSecrets = ["test-secret-1", "test-secret-2"]

### 1. Create a new secret (v1)
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "{{secretName}}",
    "secretValue": "my-super-secret-value",
    "description": "Test secret for demonstration"
}

### 2. Create multiple secrets for testing
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "test-secret-1",
    "secretValue": "value-1",
    "description": "First test secret"
}

###
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "test-secret-2", 
    "secretValue": "value-2",
    "description": "Second test secret"
}

### 3. Get a secret value (v1) - Query parameter version
GET {{baseUrl}}/secrets/{{secretName}}?version=1.0

### 4. Get a secret value (v1) - Header version
GET {{baseUrl}}/secrets/{{secretName}}
X-Version: 1.0

### 5. Get a secret value (v1) - URL segment version
GET {{baseUrl}}/v1/secrets/{{secretName}}

### 6. Get a secret value (v1) - Media type version
GET {{baseUrl}}/secrets/{{secretName}}
Accept: application/json; version=1.0

### 7. Get multiple secrets in batch
POST {{baseUrl}}/secrets/batch
Content-Type: application/json

{
    "secretNames": ["test-secret-1", "test-secret-2"]
}

### 8. List all secrets
GET {{baseUrl}}/secrets

### 9. List secrets with pagination
GET {{baseUrl}}/secrets?maxResults=10

### 10. Update a secret
PUT {{baseUrl}}/secrets/{{secretName}}
Content-Type: application/json

{
    "secretName": "{{secretName}}",
    "secretValue": "updated-secret-value",
    "description": "Updated test secret"
}

### 11. Get secret with specific version (if versioning is enabled)
GET {{baseUrl}}/secrets/{{secretName}}?versionId=EXAMPLE-1234-5678-9012-EXAMPLE

### 12. Get secret with version stage
GET {{baseUrl}}/secrets/{{secretName}}?versionStage=AWSCURRENT

### 13. Delete a secret (with recovery window)
DELETE {{baseUrl}}/secrets/{{secretName}}
Content-Type: application/json

{
    "secretName": "{{secretName}}",
    "recoveryWindowInDays": 7
}

### 14. Delete a secret immediately (force delete)
DELETE {{baseUrl}}/secrets/test-secret-1
Content-Type: application/json

{
    "secretName": "test-secret-1",
    "forceDeleteWithoutRecovery": true
}

### 15. Clean up test secrets
DELETE {{baseUrl}}/secrets/test-secret-2
Content-Type: application/json

{
    "secretName": "test-secret-2",
    "forceDeleteWithoutRecovery": true
}

##########################################################
### API Versioning Examples (Same endpoints with different versions)
##########################################################

### Query Parameter Versioning Examples
GET {{baseUrl}}/secrets/{{secretName}}?version=1.0
GET {{baseUrl}}/secrets/{{secretName}}?version=2.0

### Header Versioning Examples  
GET {{baseUrl}}/secrets/{{secretName}}
X-Version: 1.0

###
GET {{baseUrl}}/secrets/{{secretName}}
X-Version: 2.0

### URL Segment Versioning Examples
GET {{baseUrl}}/v1/secrets/{{secretName}}
GET {{baseUrl}}/v2/secrets/{{secretName}}

### Media Type Versioning Examples
GET {{baseUrl}}/secrets/{{secretName}}
Accept: application/json; version=1.0

###
GET {{baseUrl}}/secrets/{{secretName}}
Accept: application/json; version=2.0

##########################################################
### Error Handling Examples
##########################################################

### 1. Try to get non-existent secret
GET {{baseUrl}}/secrets/non-existent-secret

### 2. Try to create duplicate secret
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "{{secretName}}",
    "secretValue": "duplicate-value"
}

### 3. Try to update non-existent secret
PUT {{baseUrl}}/secrets/non-existent-secret
Content-Type: application/json

{
    "secretName": "non-existent-secret",
    "secretValue": "some-value"
}

### 4. Try to delete non-existent secret
DELETE {{baseUrl}}/secrets/non-existent-secret
Content-Type: application/json

{
    "secretName": "non-existent-secret"
}

##########################################################
### LocalStack Development Examples
##########################################################

### Note: These examples work with LocalStack running on localhost:4566
### Start LocalStack with: docker run --rm -p 4566:4566 localstack/localstack

### Create a development secret
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "dev/database-password",
    "secretValue": "dev-db-password-123",
    "description": "Development database password"
}

### Create application config secret
POST {{baseUrl}}/secrets
Content-Type: application/json

{
    "secretName": "dev/app-config",
    "secretValue": "{\"apiKey\": \"dev-api-key\", \"debugMode\": true}",
    "description": "Development application configuration"
}

### Get development secrets
GET {{baseUrl}}/secrets/dev/database-password
GET {{baseUrl}}/secrets/dev/app-config
